name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app
      run: npm run build
      
    - name: Debug secrets
      run: |
        echo "Host: ${{ secrets.VPS_HOST }}"
        echo "User: ${{ secrets.VPS_USER }}"
        echo "Key length: ${#VPS_SSH_KEY}"
      env:
        VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        debug: true
        script_stop: false
        script: |
          # Create backup of current site
          sudo mkdir -p /var/www/backup
          if [ -d "/var/www/ai.dehuisraad.com" ]; then
            sudo cp -r /var/www/ai.dehuisraad.com /var/www/backup/ai.dehuisraad.com-$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create web directory if it doesn't exist
          sudo mkdir -p /var/www/ai.dehuisraad.com
          sudo chown -R www-data:www-data /var/www/ai.dehuisraad.com
          
          # Clone/pull latest code
          cd /tmp
          if [ -d "ks-offerte-chat" ]; then
            cd ks-offerte-chat
            git pull origin main
          else
            git clone https://github.com/mennovdmm/ks-offerte-chat.git
            cd ks-offerte-chat
          fi
          
          # Install dependencies and build
          npm ci
          npm run build
          
          # Deploy build to web directory
          sudo rm -rf /var/www/ai.dehuisraad.com/*
          sudo cp -r build/* /var/www/ai.dehuisraad.com/
          sudo chown -R www-data:www-data /var/www/ai.dehuisraad.com
          
          # Ensure nginx proxy configuration exists - let emergency script handle this
          echo "üîß Nginx configuration will be handled by emergency script..."
          
          # Deploy VPS Express server - EMERGENCY FIX
          echo "üöÄ Deploying VPS Express server..."
          chmod +x /tmp/ks-offerte-chat/deploy-to-vps.sh
          chmod +x /tmp/ks-offerte-chat/force-deploy.sh
          
          # Set environment variables for deployment script
          export LANGFLOW_API_URL="${{ secrets.LANGFLOW_API_URL }}"
          export LANGFLOW_API_KEY="${{ secrets.LANGFLOW_API_KEY }}"
          
          # Run emergency deployment script to fix langflow-stream endpoint
          echo "üö® Running emergency server fix for endpoints and nginx..."
          chmod +x /tmp/ks-offerte-chat/emergency-server-fix.sh
          /tmp/ks-offerte-chat/emergency-server-fix.sh
          
          # CRITICAL: Fix environment variables (they were empty in previous deployment)
          echo "üö® CRITICAL: Fixing environment variables..."
          chmod +x /tmp/ks-offerte-chat/fix-env-variables.sh
          /tmp/ks-offerte-chat/fix-env-variables.sh
          
          # EMERGENCY: Fix server crash caused by debug logging syntax error
          echo "üö® EMERGENCY: Fixing server crash from debug logging..."
          chmod +x /tmp/ks-offerte-chat/fix-server-crash.sh
          /tmp/ks-offerte-chat/fix-server-crash.sh
          
          # SAFE FIX: Use PM2 ecosystem file instead of sed/hardcoding
          echo "üö® SAFE FIX: Using PM2 ecosystem with environment variables..."
          chmod +x /tmp/ks-offerte-chat/safe-debug-fix.sh
          /tmp/ks-offerte-chat/safe-debug-fix.sh
          
          # FINAL SERVER FIX: Deploy correct server once and for all
          echo "üéØ FINAL SERVER FIX: Deploying correct server with /api/chat endpoint..."
          chmod +x /tmp/ks-offerte-chat/fix-server-once.sh
          /tmp/ks-offerte-chat/fix-server-once.sh
          
          # Test deployment with retries
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f https://ai.dehuisraad.com/api/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed, waiting..."
              if [ $i -eq 5 ]; then
                echo "‚ùå All health checks failed"
                exit 1
              fi
              sleep 5
            fi
          done
          
          echo "üöÄ Deployment successful!"
    
    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful to https://ai.dehuisraad.com"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi